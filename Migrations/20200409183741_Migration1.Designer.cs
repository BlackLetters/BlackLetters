// <auto-generated />
using System;
using Biblioteca.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biblioteca.Migrations
{
    [DbContext(typeof(BibliotecaContext))]
    [Migration("20200409183741_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biblioteca.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Biblioteca.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Biblioteca.Models.RegistredUser", b =>
                {
                    b.Property<int>("RegistredUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegistredUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistredUserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistredUserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistredUserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegistredUserID");

                    b.ToTable("RegistredUsers");
                });

            modelBuilder.Entity("Biblioteca.Models.RegistredUserSub", b =>
                {
                    b.Property<int>("RegistredUserSubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("RegistredUserSubID");

                    b.ToTable("RegistredUserSubs");
                });

            modelBuilder.Entity("Biblioteca.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookID1")
                        .HasColumnType("int");

                    b.Property<int?>("RegistredUserID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDateOfAquire")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDateOfReturn")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("BookID1");

                    b.HasIndex("RegistredUserID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Biblioteca.Models.UnregistredUser", b =>
                {
                    b.Property<int>("UnregistredUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UnregistredUserID");

                    b.ToTable("UnregistredUsers");
                });

            modelBuilder.Entity("Biblioteca.Models.Transaction", b =>
                {
                    b.HasOne("Biblioteca.Models.Book", "BookID")
                        .WithMany()
                        .HasForeignKey("BookID1");

                    b.HasOne("Biblioteca.Models.RegistredUser", "RegistredUser")
                        .WithMany()
                        .HasForeignKey("RegistredUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
